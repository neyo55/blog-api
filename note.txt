npm install --save-dev cross-env
npm install cors
npm install axios@^1.6.0
npm install dotenv

npm install
npm start
ctrl C

npm test

taskkill /IM node.exe /F
docker-compose down

netstat -aon | findstr :3000

# To start the Mongodb 
docker run -d --name mongo -p 27017:27017 -v mongo-data:/data/db mongo:latest

# Run this if the container already exist 
docker start mongo 


# To start the backend, cd in to the backend files dir.
npm start 


# To create a default node.js frontend files 
npx create-react-app client

# To start the frontend, cd into client dir also the same command for backend.
npm install
npm install dotenv
npm start 

# to start the database
mongosh


# To check the content of the created blog in mongodb at backend on browser 
http://localhost:3000/api/posts

or to check it from the terminal 

curl http://localhost:3000/api/posts

# To login to the mongodb database using deafult credentials
docker exec -it mongo mongosh
use blog-api
db.posts.find()

# To login to mongodb in the container 
docker exec -it blog-api-mongo-1 mongosh
use blog-api
db.posts.find()

# Using created username and password to access the database (current database)
docker exec -it blog-db mongosh -u admin -p password123 --authenticationDatabase admin
use blog-api
db.posts.find()

# Using created username and password to access the database
docker exec -it blog-api-mongo-1 mongosh -u neyo55 -p neyo53669 --authenticationDatabase admin
use blog-api
db.posts.find()

# Open a shell inside the container
docker exec -it mongo-seeded mongosh -u admin -p password123 --authenticationDatabase admin



# To stop and restart the MongoDB container
docker stop mongo
docker start mongo

dbname blog-db
user admin
passord password123
authdb admin


# This is used to test the CRUD in backend of the app if it works using the terminal and u can edit the title and content as desired.
curl -X POST -H "Content-Type: application/json" -d '{"title":"Test","content":"Content"}' http://localhost:3000/api/posts


docker build -t
docker ps -a
docker-compose up --build
docker-compose down
docker-compose logs app
docker-compose logs frontend
docker logs blog-frontend
docker-compose logs mongo


# clean rebuild after changes to dockerfile or compose 
docker compose down --volumes --remove-orphans
docker compose build --no-cache
docker compose up


API Root: http://localhost:3000
API Health: http://localhost:3000/health
Frontend: http://localhost:3001


docker tag blog-api-backend:latest neyo55/blog-api-backend:latest
docker tag blog-api-frontend:latest neyo55/blog-api-frontend:latest

docker build -t neyo55/blog-api-backend:latest .
docker build -t neyo55/blog-api-frontend:latest .

docker build --no-cache -f client/Dockerfile -t neyo55/blog-api-frontend:latest client/

docker run -d -p 3001:3001 neyo55/blog-api-frontend:latest

docker run -d -p 3000:3000 -e MONGO_URI=mongodb://host.docker.internal:27017/blog-api neyo55/blog-api-backend:latest


docker push neyo55/blog-api-backend:latest
docker push neyo55/blog-api-frontend:latest

# To check the health of the containers 
docker inspect --format='{{json .State.Health}}' blog-api-app-1
docker inspect --format='{{json .State.Health}}' blog-api-frontend-1
docker inspect --format='{{json .State.Health}}' blog-api-mongo-1

# To remove the untagged images 
docker rmi $(docker images -f "dangling=true" -q)


# To generate a random base64 32bit secret key
openssl rand -base64 32


# To get aws iam user using cli
aws sts get-caller-identity


API Root: http://localhost:3000
API Health: http://localhost:3000/health
Frontend: http://localhost:3001


sudo ufw allow 3000/tcp    # backend
sudo ufw allow 3001/tcp    # frontend
sudo ufw allow 27017/tcp   # MongoDB (optional, only for remote admin access)
